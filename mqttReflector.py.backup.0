import paho.mqtt.client as mqttClient
import time
import json

### weather/radiation
def on_message_radiation(mosq, obj, msg):
    	mosq.publish("weather", msg.payload);
	print("Message is: "+msg.payload)


## anavi/ea14e76e308ff50a0e09a7e5bf96749a/air/temperature
def on_message_temperature(mosq, obj, msg):

	j = json.loads(msg.payload)
	value = j["temperature"]; 
        epoch_time = int (time.time())
        message = '{"dateTime":'+str(epoch_time)+', "inTemp" : '+str(value)+'}'
    	mosq.publish("weather", message);
	print("Message is :"+message);
	return

## anavi/ea14e76e308ff50a0e09a7e5bf96749a/air/humidity
def on_message_humidity(mosq, obj, msg):

	j = json.loads(msg.payload)
	value = j["humidity"];

        epoch_time = int (time.time())
        message = '{"dateTime":'+str(epoch_time)+', "inHumidity" : '+str(value)+'}'
    	mosq.publish("weather", message);
	print("Message is :"+message);
	return

### topic message
def on_message(mosq, obj, msg):
    print(msg.topic+" "+str(msg.qos)+" "+str(msg.payload))


def on_connect(self, client, userdata, flags, rc):
 
    if rc == 0:
        print("Connected to broker")
        global Connected                #Use global variable
        Connected = True                #Signal connection 
 
    else:
        print("Connection failed")

### topic message
def on_message(mosq, obj, msg):
    print(msg.topic+" "+str(msg.qos)+" "+str(msg.payload))

mqttc = mqttClient.Client("Python")               	# create new instance
mqttc.username_pw_set("power", "nD3M$3AhDob2K+xhAE")    	# set username and password
mqttc.connect("172.16.0.4", 1883)


# Add message callbacks that will only trigger on a specific subscription match

mqttc.message_callback_add('weather/radiation', on_message_radiation)
mqttc.message_callback_add('anavi/ea14e76e308ff50a0e09a7e5bf96749a/air/temperature', on_message_temperature)
mqttc.message_callback_add('anavi/ea14e76e308ff50a0e09a7e5bf96749a/air/humidity', on_message_humidity)
mqttc.on_connect= on_connect                 		# attach function to callback
mqttc.on_message = on_message	# General Message receiver, useful for debugging

#mqtt_topics = ["weather/radiation", "anavi/c3019c69cac288d287f0de1ecf45f37c/#", "anavi/ea14e76e308ff50a0e09a7e5bf96749a/#"]; 
mqtt_topics = ["weather/radiation", "anavi/ea14e76e308ff50a0e09a7e5bf96749a/#"]; 
for topic in mqtt_topics:
        mqttc.subscribe(topic)

mqttc.loop_forever();

# Data that could be added.
# Client mosqsub|12755-mqttpi received PUBLISH (d0, q0, r0, m0, '/weather/raditation', ... (66 bytes))
# { "dateTime" : 1603913320, "cps" :  0, "cpm" : 16, "usvhr" : 0.09}
# Client mosqsub|12755-mqttpi received PUBLISH (d0, q0, r0, m0, 'anavi/ea14e76e308ff50a0e09a7e5bf96749a/BMPpressure', ... (22 bytes))
# {"BMPpressure":978.22}
# Client mosqsub|12755-mqttpi received PUBLISH (d0, q0, r0, m0, 'anavi/ea14e76e308ff50a0e09a7e5bf96749a/BMPtemperature', ... (24 bytes))
# {"BMPtemperature":80.78}
# Client mosqsub|12755-mqttpi received PUBLISH (d0, q0, r0, m0, 'anavi/ea14e76e308ff50a0e09a7e5bf96749a/air/temperature', ... (22 bytes))
# {"temperature":77.684}
# Client mosqsub|12755-mqttpi received PUBLISH (d0, q0, r0, m0, 'anavi/ea14e76e308ff50a0e09a7e5bf96749a/air/humidity', ... (17 bytes))
# {"humidity":48.5}
# Client mosqsub|12755-mqttpi received PUBLISH (d0, q0, r0, m0, 'anavi/ea14e76e308ff50a0e09a7e5bf96749a/air/heatindex', ... (22 bytes))
# {"heatindex":77.43144}
